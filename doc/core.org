#+TITLE: How does core init works

* init.el
It just loads =core.el= and declare all the stars with =moon|= macro.

* core.el

First I sets a bunch of variables, like path and hooks.
Then it initialize by:
- load [[core-package.el][core-package]] for some functions and macros.
- set =gc-cons-threshol= for faster starup
- load other core files(just [[core-ui.el][core-ui]])
- defun =moon-finalize= which take contains all the init procedures
- add =moon-finalize= to =emacs-starup-hook= so all init will be started
after =moon|= macro in =init.el=

** moon-finalize
- run [[moon-initialize][moon-initialize]], [[moon-initialize-load-path][moon-initialize-load-path]] (doesn't do anything) 
and [[moon-initialize-star][moon-initialize-star]]
- run =moon-init-hook= and =moon-post-init-hook=
- set =gc-con= back to normal
  
** Important note
1. All initilization of stars are done in [[moon-finalize][moon-finalize]],
therefore, after =init.el= is loaded and after command-line
are processed.
2. everything in =moon-init-hook= and =moon-post-init= hook are
run after stars are loaded.
  
* core-package.el
  
Declares all the core functions and macros used in star configs,
and some variable used by those functions.

** functions

*** moon-initialize
It literally just calls =package-initialize=. I told you this config is (too) simple.

*** moon-initialize-load-path
Because =package-initialize= took care of load-path of packages,
this function just add =~/.emacs.d/.local= to load path for autoload file 
extracted from star autoloads to work.

*** moon-initialize-star
This function loads all the stars, i.e. all the packages.
It calls [[moon-load-autoload][moon-autoload]], [[moon-load-package][moon-load-package]], [[moon-load-config][moon-load-config]], and [[moon-grand-use-package-call][moon-grand-use-package-call]].
then require =use-package=, finally call a function =moon-grand-use-package-call=.
The function got it name becaue all the =use-package= declared in =config.el= in stars
are added to it and executed together when =moon-grand-use-package-call= is evaluated.

*** moon-load-autoload
It just loads =~/.emacs.d/.local/autoloads.el= that are generated by [[moon/generate-autoload-file][moon/generate-autoload-file]]
So all the autoload functions you declared in =autoload.el= or =autoload/xxx.el= in stars are loaded.

*** moon-load-package
It craw through you star dir and loads all the =package.el=

*** moon-load-config
It craw through you star dir and loads all the =config.el=

*** moon-grand-use-package-call
All the (use-package| xxx blah blah blah) will be expanded into 
#+BEGIN_SRC lisp
(use-package xxx blah blah blab :init (pre-init-xxx) :config (post-config-xxx))
#+END_SRC
and appended to this function.
Then this function is called in [[moon-initialize-star][moon-initialize-star]].
** macros
   
*** load|
Just load file with a relative path to the current file.

*** package|
Add package to =moon-package-list= so They will be installed by [[moon/install-package][moon/install-packages]]

*** moon|
Add stars to =moon-star-list=

*** post-config|
Add expressions to =post-config-xxx= function 
so they will be called in =use-package='s =:config= flag

*** pre-init|
Add expressions to =pre-init-xxx= function 
so they will be called in =use-package='s =:init= flag

*** use-pacakge|
It create a =(use-package blah blah :init pre-init-xxx :config post-config-xxx)=
and add that to ==moon-grand-use-package-call=

*** after|
A smart wrapper around `with-eval-after-load'.

Expressions inside will be called right after the library is loaded,
before `post-config|' but after `pro-init'.

** commands

*** moon/install-package
install package in =moon-package-list=

*** moon/update-package
update all installed packages

*** moon/generate-autoload-file
extract all the autoload files from stars to =~/.emacs.d/.local/autoloads.el=

* core-ui.el
